<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                   "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<!-- lifted from troff+man by doclifter -->
<refentry id='ttoaddr3'>
<refentryinfo><date>28 Sept 2001</date></refentryinfo>
<refmeta>
<refentrytitle>IPSEC_TTOADDR</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>28 Sept 2001</refmiscinfo>
</refmeta>
<refnamediv id='name'>
<refname>ipsec ttoaddr</refname>
<refname>ipsec tnatoaddr</refname>
<refname>ipsec addrtot</refname>
<refname>ipsec ttosubnet</refname>
<refname>ipsec subnettot</refname>
<refpurpose>convert Internet addresses and Subnet masks to and from text</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;freeswan.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>const char *<function>ttoaddr</function></funcdef>
    <paramdef>const char * <parameter>src</parameter></paramdef>
    <paramdef>size_t <parameter>srclen</parameter></paramdef>
    <paramdef>int <parameter>af</parameter></paramdef>
    <paramdef>ip_address * <parameter>addr</parameter></paramdef>
</funcprototype>

<funcprototype>
<funcdef>const char *<function>tnatoaddr</function></funcdef>
    <paramdef>const char * <parameter>src</parameter></paramdef>
    <paramdef>size_t <parameter>srclen</parameter></paramdef>
    <paramdef>int <parameter>af</parameter></paramdef>
    <paramdef>ip_address * <parameter>addr</parameter></paramdef>
</funcprototype>

<funcprototype>
<funcdef>size_t <function>addrtot</function></funcdef>
    <paramdef>const ip_address * <parameter>addr</parameter></paramdef>
    <paramdef>int <parameter>format</parameter></paramdef>
    <paramdef>char * <parameter>dst</parameter></paramdef>
    <paramdef>size_t <parameter>dstlen</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>const char *<function>ttosubnet</function></funcdef>
    <paramdef>const char * <parameter>src</parameter></paramdef>
    <paramdef>size_t <parameter>srclen</parameter></paramdef>
    <paramdef>int <parameter>af</parameter></paramdef>
    <paramdef>ip_subnet * <parameter>dst</parameter></paramdef>
</funcprototype>

<funcprototype>
<funcdef>size_t <function>subnettot</function></funcdef>
    <paramdef>const ip_subnet * <parameter>sub</parameter></paramdef>
    <paramdef>int <parameter>format</parameter></paramdef>
    <paramdef>char * <parameter>dst</parameter></paramdef>
    <paramdef>size_t <parameter>dstlen</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 id='description'><title>DESCRIPTION</title>
<para><emphasis remap='I'>Ttoaddr</emphasis>
converts a text-string name or numeric address into a binary address
(in network byte order).
<emphasis remap='I'>Tnatoaddr</emphasis>
does the same conversion,
but the only text forms it accepts are
the &ldquo;official&rdquo; forms of
numeric address (dotted-decimal for IPv4, colon-hex for IPv6).
<emphasis remap='I'>Addrtot</emphasis>
does the reverse conversion, from binary address back to a text form.
<emphasis remap='I'>Ttosubnet</emphasis>
and
<function>subnettot</function>
do likewise for the &ldquo;address/mask&rdquo; form used to write a
specification of a subnet.</para>

<para>An IPv4 address is specified in text as a
dotted-decimal address (e.g.
<literal>1.2.3.4</literal>),
an eight-digit network-order hexadecimal number with the usual C prefix (e.g.
<emphasis remap='B'>0x01020304</emphasis>,
which is synonymous with
<literal>1.2.3.4</literal>),
an eight-digit host-order hexadecimal number with a
<emphasis remap='B'>0h</emphasis>
prefix (e.g.
<emphasis remap='B'>0h01020304</emphasis>,
which is synonymous with
<literal>1.2.3.4</literal>
on a big-endian host and
<literal>4.3.2.1</literal>
on a little-endian host),
a DNS name to be looked up via
<citerefentry><refentrytitle>gethostbyname</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
or an old-style network name to be looked up via
<citerefentry><refentrytitle>getnetbyname</refentrytitle><manvolnum>3</manvolnum></citerefentry>.</para>

<para>A dotted-decimal address may be incomplete, in which case
text-to-binary conversion implicitly appends
as many instances of
<literal>.0</literal>
as necessary to bring it up to four components.
The components of a dotted-decimal address are always taken as
decimal, and leading zeros are ignored.
For example,
<literal>10</literal>
is synonymous with
<literal>10.0.0.0</literal>,
and
<literal>128.009.000.032</literal>
is synonymous with
<literal>128.9.0.32</literal>
(the latter example is verbatim from RFC 1166).
The result of applying
<function>addrtot</function>
to an IPv4 address is always complete and does not contain leading zeros.</para>

<para>Use of hexadecimal addresses is
<emphasis remap='B'>strongly</emphasis>
<emphasis remap='B'>discouraged</emphasis>;
they are included only to save hassles when dealing with
the handful of perverted programs which already print
network addresses in hexadecimal.</para>

<para>An IPv6 address is specified in text with
colon-hex notation (e.g.
<emphasis remap='B'>0:56:78ab:22:33:44:55:66</emphasis>),
colon-hex with
<emphasis remap='B'>::</emphasis>
abbreviating at most one subsequence of multiple zeros (e.g.
<emphasis remap='B'>99:ab::54:068</emphasis>,
which is synonymous with
<emphasis remap='B'>99:ab:0:0:0:0:54:68</emphasis>),
or a DNS name to be looked up via
<citerefentry><refentrytitle>gethostbyname</refentrytitle><manvolnum>3</manvolnum></citerefentry>.
The result of applying
<function>addrtot</function>
to an IPv6 address will use
<emphasis remap='B'>::</emphasis>
abbreviation if possible,
and will not contain leading zeros.</para>

<para>The letters in hexadecimal
may be uppercase or lowercase or any mixture thereof.</para>

<para>DNS names may be complete (optionally terminated with a &ldquo;.&rdquo;)
or incomplete, and are looked up as specified by local system configuration
(see
<citerefentry><refentrytitle>resolver</refentrytitle><manvolnum>5</manvolnum></citerefentry>).
The
<emphasis remap='I'>h_addr</emphasis>
value returned by
<citerefentry><refentrytitle>gethostbyname2</refentrytitle><manvolnum>3</manvolnum></citerefentry>
is used,
so with current DNS implementations,
the result when the name corresponds to more than one address is
difficult to predict.
IPv4 name lookup resorts to
<citerefentry><refentrytitle>getnetbyname</refentrytitle><manvolnum>3</manvolnum></citerefentry>
only if
<citerefentry><refentrytitle>gethostbyname2</refentrytitle><manvolnum>3</manvolnum></citerefentry>
fails.</para>

<para>A subnet specification is of the form <emphasis remap='I'>network</emphasis><emphasis remap='B'>/</emphasis><emphasis remap='I'>mask</emphasis>.
The
<emphasis remap='I'>network</emphasis>
and
<emphasis remap='I'>mask</emphasis>
can be any form acceptable to
<function>ttoaddr</function>.
In addition, and preferably, the
<emphasis remap='I'>mask</emphasis>
can be a decimal integer (leading zeros ignored) giving a bit count,
in which case
it stands for a mask with that number of high bits on and all others off
(e.g.,
<literal>24</literal>
in IPv4 means
<literal>255.255.255.0</literal>).
In any case, the mask must be contiguous
(a sequence of high bits on and all remaining low bits off).
As a special case, the subnet specification
<emphasis remap='B'>%default</emphasis>
is a synonym for
<emphasis remap='B'>0.0.0.0/0</emphasis>
or
<emphasis remap='B'>::/0</emphasis>
in IPv4 or IPv6 respectively.</para>

<para><emphasis remap='I'>Ttosubnet</emphasis>
ANDs the mask with the address before returning,
so that any non-network bits in the address are turned off
(e.g.,
<emphasis remap='B'>10.1.2.3/24</emphasis>
is synonymous with
<emphasis remap='B'>10.1.2.0/24</emphasis>).
<emphasis remap='I'>Subnettot</emphasis>
always generates the decimal-integer-bit-count
form of the mask,
with no leading zeros.</para>

<para>The
<varname role='parameter'>srclen</varname>
parameter of
<function>ttoaddr</function>
and
<function>ttosubnet</function>
specifies the length of the text string pointed to by
<varname role='parameter'>src</varname>;
it is an error for there to be anything else
(e.g., a terminating NUL) within that length.
As a convenience for cases where an entire NUL-terminated string is
to be converted,
a
<varname role='parameter'>srclen</varname>
value of
<literal>0</literal>
is taken to mean
<emphasis remap='B'>strlen(src)</emphasis>.</para>

<para>The
<varname role='parameter'>af</varname>
parameter of
<function>ttoaddr</function>
and
<function>ttosubnet</function>
specifies the address family of interest.
It should be either
<emphasis remap='B'>AF_INET</emphasis>
or
<emphasis remap='B'>AF_INET6</emphasis>.</para>

<para>The
<varname role='parameter'>dstlen</varname>
parameter of
<function>addrtot</function>
and
<function>subnettot</function>
specifies the size of the
<varname role='parameter'>dst</varname>
parameter;
under no circumstances are more than
<varname role='parameter'>dstlen</varname>
bytes written to
<varname role='parameter'>dst</varname>.
A result which will not fit is truncated.
<emphasis remap='I'>Dstlen</emphasis>
can be zero, in which case
<varname role='parameter'>dst</varname>
need not be valid and no result is written,
but the return value is unaffected;
in all other cases, the (possibly truncated) result is NUL-terminated.
The
<emphasis remap='I'>freeswan.h</emphasis>
header file defines constants,
<emphasis remap='B'>ADDRTOT_BUF</emphasis>
and
<emphasis remap='B'>SUBNETTOT_BUF</emphasis>,
which are the sizes of buffers just large enough for worst-case results.</para>

<para>The
<varname role='parameter'>format</varname>
parameter of
<function>addrtot</function>
and
<function>subnettot</function>
specifies what format is to be used for the conversion.
The value
<literal>0</literal>
(not the character
<emphasis remap='B'>'0'</emphasis>,
but a zero value)
specifies a reasonable default,
and is in fact the only format currently available in
<function>subnettot</function>.
<emphasis remap='I'>Addrtot</emphasis>
also accepts format values
<emphasis remap='B'>'r'</emphasis>
(signifying a text form suitable for DNS reverse lookups,
e.g.
<emphasis remap='B'>4.3.2.1.IN-ADDR.ARPA.</emphasis>
for IPv4 and
RFC 2874 format for IPv6),
and
<emphasis remap='B'>'R'</emphasis>
(signifying an alternate reverse-lookup form,
an error for IPv4 and RFC 1886 format for IPv6).
Reverse-lookup names always end with a &ldquo;.&rdquo;.</para>

<para>The text-to-binary functions return NULL for success and
a pointer to a string-literal error message for failure;
see DIAGNOSTICS.
The binary-to-text functions return
<literal>0</literal>
for a failure, and otherwise
always return the size of buffer which would
be needed to
accommodate the full conversion result, including terminating NUL;
it is the caller's responsibility to check this against the size of
the provided buffer to determine whether truncation has occurred.</para>
</refsect1>

<refsect1 id='see_also'><title>SEE ALSO</title>
<para><citerefentry><refentrytitle>inet</refentrytitle><manvolnum>3</manvolnum></citerefentry></para>
</refsect1>

<refsect1 id='diagnostics'><title>DIAGNOSTICS</title>
<para>Fatal errors in
<function>ttoaddr</function>
are:
empty input;
unknown address family;
attempt to allocate temporary storage for a very long name failed;
name lookup failed;
syntax error in dotted-decimal or colon-hex form;
dotted-decimal or colon-hex component too large.</para>

<para>Fatal errors in
<function>ttosubnet</function>
are:
no
<emphasis remap='B'>/</emphasis>
in
<varname role='parameter'>src</varname>;
<function>ttoaddr</function>
error in conversion of
<emphasis remap='I'>network</emphasis>
or
<emphasis remap='I'>mask</emphasis>;
bit-count mask too big;
mask non-contiguous.</para>

<para>Fatal errors in
<function>addrtot</function>
and
<function>subnettot</function>
are:
unknown format.</para>
</refsect1>

<refsect1 id='history'><title>HISTORY</title>
<para>Written for the FreeS/WAN project by Henry Spencer.</para>
</refsect1>

<refsect1 id='bugs'><title>BUGS</title>
<para>The interpretation of incomplete dotted-decimal addresses
(e.g.
<emphasis remap='B'>10/24</emphasis>
means
<emphasis remap='B'>10.0.0.0/24</emphasis>)
differs from that of some older conversion
functions, e.g. those of
<citerefentry><refentrytitle>inet</refentrytitle><manvolnum>3</manvolnum></citerefentry>.
The behavior of the older functions has never been
particularly consistent or particularly useful.</para>

<para>Ignoring leading zeros in dotted-decimal components and bit counts
is arguably the most useful behavior in this application,
but it might occasionally cause confusion with the historical use of leading
zeros to denote octal numbers.</para>

<para><emphasis remap='I'>Ttoaddr</emphasis>
does not support the mixed colon-hex-dotted-decimal
convention used to embed an IPv4 address in an IPv6 address.</para>

<para><emphasis remap='I'>Addrtot</emphasis>
always uses the
<emphasis remap='B'>::</emphasis>
abbreviation (which can appear only once in an address) for the
<emphasis remap='I'>first</emphasis>
sequence of multiple zeros in an IPv6 address.
One can construct addresses (unlikely ones) in which this is suboptimal.</para>

<para><emphasis remap='I'>Addrtot</emphasis>
<emphasis remap='B'>'r'</emphasis>
conversion of an IPv6 address uses lowercase hexadecimal,
not the uppercase used in RFC 2874's examples.
It takes careful reading of RFCs 2874, 2673, and 2234 to realize
that lowercase is technically legitimate here,
and there may be software which botches this
and hence would have trouble with lowercase hex.</para>

<para>Possibly
<function>subnettot</function>
ought to recognize the
<emphasis remap='B'>%default</emphasis>
case and generate that string as its output.
Currently it doesn't.</para>

<para>It is barely possible that somebody, somewhere,
might have a legitimate use for non-contiguous subnet masks.</para>

<para><citerefentry><refentrytitle>Getnetbyname</refentrytitle><manvolnum>3</manvolnum></citerefentry>
is a historical dreg.</para>

<para><emphasis remap='I'>Tnatoaddr</emphasis>
probably should enforce completeness of dotted-decimal addresses.</para>

<para>The restriction of text-to-binary error reports to literal strings
(so that callers don't need to worry about freeing them or copying them)
does limit the precision of error reporting.</para>

<para>The text-to-binary error-reporting convention lends itself
to slightly obscure code,
because many readers will not think of NULL as signifying success.
A good way to make it clearer is to write something like:</para>

<literallayout remap='.nf'>
<emphasis remap='B'>const char *error;</emphasis>

<emphasis remap='B'>error = ttoaddr( /* ... */ );</emphasis>
<emphasis remap='B'>if (error != NULL) {</emphasis>
<emphasis remap='B'>        /* something went wrong */</emphasis>
</literallayout> <!-- .fi -->
</refsect1>
</refentry>

