<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                   "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<!-- lifted from troff+man by doclifter -->
<refentry id='atoaddr3'>
<refentryinfo><date>11 June 2001</date></refentryinfo>
<refmeta>
<refentrytitle>IPSEC_ATOADDR</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>11 June 2001</refmiscinfo>
</refmeta>
<refnamediv id='name'>
<refname>ipsec atoaddr</refname>
<refname>ipsec addrtoa</refname>
<refname>ipsec atosubnet</refname>
<refname>ipsec subnettoa</refname>
<refpurpose>convert Internet addresses and Subnet masks to and from ASCII</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;freeswan.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>const char *<function>atoaddr</function></funcdef>
    <paramdef>const char * <parameter>src</parameter></paramdef>
    <paramdef>size_t <parameter>srclen</parameter></paramdef>
    <paramdef>struct in_addr * <parameter>addr</parameter></paramdef>
</funcprototype>

<funcprototype>
<funcdef>size_t <function>addrtoa</function></funcdef>
    <paramdef>struct in_addr <parameter>addr</parameter></paramdef>
    <paramdef>int <parameter>format</parameter></paramdef>
    <paramdef>char * <parameter>dst</parameter></paramdef>
    <paramdef>size_t <parameter>dstlen</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>const char *<function>atosubnet</function></funcdef>
    <paramdef>const char * <parameter>src</parameter></paramdef>
    <paramdef>size_t <parameter>srclen</parameter></paramdef>
    <paramdef>struct in_addr * <parameter>addr</parameter></paramdef>
    <paramdef>struct in_addr * <parameter>mask</parameter></paramdef>
</funcprototype>

<funcprototype>
<funcdef>size_t <function>subnettoa</function></funcdef>
    <paramdef>struct in_addr <parameter>addr</parameter></paramdef>
    <paramdef>struct in_addr <parameter>mask</parameter></paramdef>
    <paramdef>int <parameter>format</parameter></paramdef>
    <paramdef>char * <parameter>dst</parameter></paramdef>
    <paramdef>size_t <parameter>dstlen</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 id='description'><title>DESCRIPTION</title>
<para>These functions are obsolete; see
<citerefentry><refentrytitle>ipsec_ttoaddr</refentrytitle><manvolnum>3</manvolnum></citerefentry>
for their replacements.</para>

<para><emphasis remap='I'>Atoaddr</emphasis>
converts an ASCII name or dotted-decimal address into a binary address
(in network byte order).
<emphasis remap='I'>Addrtoa</emphasis>
does the reverse conversion, back to an ASCII dotted-decimal address.
<emphasis remap='I'>Atosubnet</emphasis>
and
<function>subnettoa</function>
do likewise for the &ldquo;address/mask&rdquo; ASCII form used to write a
specification of a subnet.</para>

<para>An address is specified in ASCII as a
dotted-decimal address (e.g.
<literal>1.2.3.4</literal>),
an eight-digit network-order hexadecimal number with the usual C prefix (e.g.
<emphasis remap='B'>0x01020304</emphasis>,
which is synonymous with
<literal>1.2.3.4</literal>),
an eight-digit host-order hexadecimal number with a
<emphasis remap='B'>0h</emphasis>
prefix (e.g.
<emphasis remap='B'>0h01020304</emphasis>,
which is synonymous with
<literal>1.2.3.4</literal>
on a big-endian host and
<literal>4.3.2.1</literal>
on a little-endian host),
a DNS name to be looked up via
<citerefentry><refentrytitle>gethostbyname</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
or an old-style network name to be looked up via
<citerefentry><refentrytitle>getnetbyname</refentrytitle><manvolnum>3</manvolnum></citerefentry>.</para>

<para>A dotted-decimal address may be incomplete, in which case
ASCII-to-binary conversion implicitly appends
as many instances of
<literal>.0</literal>
as necessary to bring it up to four components.
The components of a dotted-decimal address are always taken as
decimal, and leading zeros are ignored.
For example,
<literal>10</literal>
is synonymous with
<literal>10.0.0.0</literal>,
and
<literal>128.009.000.032</literal>
is synonymous with
<literal>128.9.0.32</literal>
(the latter example is verbatim from RFC 1166).
The result of
<function>addrtoa</function>
is always complete and does not contain leading zeros.</para>

<para>The letters in
a hexadecimal address may be uppercase or lowercase or any mixture thereof.
Use of hexadecimal addresses is
<emphasis remap='B'>strongly</emphasis>
<emphasis remap='B'>discouraged</emphasis>;
they are included only to save hassles when dealing with
the handful of perverted programs which already print
network addresses in hexadecimal.</para>

<para>DNS names may be complete (optionally terminated with a &ldquo;.&rdquo;)
or incomplete, and are looked up as specified by local system configuration
(see
<citerefentry><refentrytitle>resolver</refentrytitle><manvolnum>5</manvolnum></citerefentry>).
The
<emphasis remap='I'>h_addr</emphasis>
value returned by
<citerefentry><refentrytitle>gethostbyname</refentrytitle><manvolnum>3</manvolnum></citerefentry>
is used,
so with current DNS implementations,
the result when the name corresponds to more than one address is
difficult to predict.
Name lookup resorts to
<citerefentry><refentrytitle>getnetbyname</refentrytitle><manvolnum>3</manvolnum></citerefentry>
only if
<citerefentry><refentrytitle>gethostbyname</refentrytitle><manvolnum>3</manvolnum></citerefentry>
fails.</para>

<para>A subnet specification is of the form <emphasis remap='I'>network</emphasis><emphasis remap='B'>/</emphasis><varname role='parameter'>mask</varname>.
The
<emphasis remap='I'>network</emphasis>
and
<varname role='parameter'>mask</varname>
can be any form acceptable to
<function>atoaddr</function>.
In addition, the
<varname role='parameter'>mask</varname>
can be a decimal integer (leading zeros ignored) giving a bit count,
in which case
it stands for a mask with that number of high bits on and all others off
(e.g.,
<literal>24</literal>
means
<literal>255.255.255.0</literal>).
In any case, the mask must be contiguous
(a sequence of high bits on and all remaining low bits off).
As a special case, the subnet specification
<emphasis remap='B'>%default</emphasis>
is a synonym for
<emphasis remap='B'>0.0.0.0/0</emphasis>.</para>

<para><emphasis remap='I'>Atosubnet</emphasis>
ANDs the mask with the address before returning,
so that any non-network bits in the address are turned off
(e.g.,
<emphasis remap='B'>10.1.2.3/24</emphasis>
is synonymous with
<emphasis remap='B'>10.1.2.0/24</emphasis>).
<emphasis remap='I'>Subnettoa</emphasis>
generates the decimal-integer-bit-count
form of the mask,
with no leading zeros,
unless the mask is non-contiguous.</para>

<para>The
<varname role='parameter'>srclen</varname>
parameter of
<function>atoaddr</function>
and
<function>atosubnet</function>
specifies the length of the ASCII string pointed to by
<varname role='parameter'>src</varname>;
it is an error for there to be anything else
(e.g., a terminating NUL) within that length.
As a convenience for cases where an entire NUL-terminated string is
to be converted,
a
<varname role='parameter'>srclen</varname>
value of
<literal>0</literal>
is taken to mean
<emphasis remap='B'>strlen(src)</emphasis>.</para>

<para>The
<varname role='parameter'>dstlen</varname>
parameter of
<function>addrtoa</function>
and
<function>subnettoa</function>
specifies the size of the
<varname role='parameter'>dst</varname>
parameter;
under no circumstances are more than
<varname role='parameter'>dstlen</varname>
bytes written to
<varname role='parameter'>dst</varname>.
A result which will not fit is truncated.
<emphasis remap='I'>Dstlen</emphasis>
can be zero, in which case
<varname role='parameter'>dst</varname>
need not be valid and no result is written,
but the return value is unaffected;
in all other cases, the (possibly truncated) result is NUL-terminated.
The
<emphasis remap='I'>freeswan.h</emphasis>
header file defines constants,
<emphasis remap='B'>ADDRTOA_BUF</emphasis>
and
<emphasis remap='B'>SUBNETTOA_BUF</emphasis>,
which are the sizes of buffers just large enough for worst-case results.</para>

<para>The
<varname role='parameter'>format</varname>
parameter of
<function>addrtoa</function>
and
<function>subnettoa</function>
specifies what format is to be used for the conversion.
The value
<literal>0</literal>
(not the ASCII character
<emphasis remap='B'>'0'</emphasis>,
but a zero value)
specifies a reasonable default,
and is in fact the only format currently available.
This parameter is a hedge against future needs.</para>

<para>The ASCII-to-binary functions return NULL for success and
a pointer to a string-literal error message for failure;
see DIAGNOSTICS.
The binary-to-ASCII functions return
<literal>0</literal>
for a failure, and otherwise
always return the size of buffer which would
be needed to
accommodate the full conversion result, including terminating NUL;
it is the caller's responsibility to check this against the size of
the provided buffer to determine whether truncation has occurred.</para>
</refsect1>

<refsect1 id='see_also'><title>SEE ALSO</title>
<para><citerefentry><refentrytitle>inet</refentrytitle><manvolnum>3</manvolnum></citerefentry></para>
</refsect1>

<refsect1 id='diagnostics'><title>DIAGNOSTICS</title>
<para>Fatal errors in
<function>atoaddr</function>
are:
empty input;
attempt to allocate temporary storage for a very long name failed;
name lookup failed;
syntax error in dotted-decimal form;
dotted-decimal component too large to fit in 8 bits.</para>

<para>Fatal errors in
<function>atosubnet</function>
are:
no
<emphasis remap='B'>/</emphasis>
in
<varname role='parameter'>src</varname>;
<function>atoaddr</function>
error in conversion of
<emphasis remap='I'>network</emphasis>
or
<varname role='parameter'>mask</varname>;
bit-count mask too big;
mask non-contiguous.</para>

<para>Fatal errors in
<function>addrtoa</function>
and
<function>subnettoa</function>
are:
unknown format.</para>
</refsect1>

<refsect1 id='history'><title>HISTORY</title>
<para>Written for the FreeS/WAN project by Henry Spencer.</para>
</refsect1>

<refsect1 id='bugs'><title>BUGS</title>
<para>The interpretation of incomplete dotted-decimal addresses
(e.g.
<emphasis remap='B'>10/24</emphasis>
means
<emphasis remap='B'>10.0.0.0/24</emphasis>)
differs from that of some older conversion
functions, e.g. those of
<citerefentry><refentrytitle>inet</refentrytitle><manvolnum>3</manvolnum></citerefentry>.
The behavior of the older functions has never been
particularly consistent or particularly useful.</para>

<para>Ignoring leading zeros in dotted-decimal components and bit counts
is arguably the most useful behavior in this application,
but it might occasionally cause confusion with the historical use of leading
zeros to denote octal numbers.</para>

<para>It is barely possible that somebody, somewhere,
might have a legitimate use for non-contiguous subnet masks.</para>

<para><citerefentry><refentrytitle>Getnetbyname</refentrytitle><manvolnum>3</manvolnum></citerefentry>
is a historical dreg.</para>

<para>The restriction of ASCII-to-binary error reports to literal strings
(so that callers don't need to worry about freeing them or copying them)
does limit the precision of error reporting.</para>

<para>The ASCII-to-binary error-reporting convention lends itself
to slightly obscure code,
because many readers will not think of NULL as signifying success.
A good way to make it clearer is to write something like:</para>

<literallayout remap='.nf'>
<emphasis remap='B'>const char *error;</emphasis>

<emphasis remap='B'>error = atoaddr( /* ... */ );</emphasis>
<emphasis remap='B'>if (error != NULL) {</emphasis>
<emphasis remap='B'>        /* something went wrong */</emphasis>
</literallayout> <!-- .fi -->
</refsect1>
</refentry>

