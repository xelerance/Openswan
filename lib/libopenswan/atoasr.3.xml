<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                   "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<!-- lifted from troff+man by doclifter -->
<refentry id='atoasr3'>
<refentryinfo><date>11 June 2001</date></refentryinfo>
<refmeta>
<refentrytitle>IPSEC_ATOASR</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>11 June 2001</refmiscinfo>
</refmeta>
<refnamediv id='name'>
<refname>ipsec atoasr</refname>
<refname>ipsec rangetoa</refname>
<refpurpose>convert ASCII to Internet address, subnet, or range, convert Internet address range to ASCII</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;freeswan.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>const char *<function>atoasr</function></funcdef>
    <paramdef>const char * <parameter>src</parameter></paramdef>
    <paramdef>size_t <parameter>srclen</parameter></paramdef>
    <paramdef>char * <parameter>type</parameter></paramdef>
    <paramdef>struct in_addr * <parameter>addrs</parameter></paramdef>
</funcprototype>

<funcprototype>
<funcdef>size_t <function>rangetoa</function></funcdef>
    <paramdef>struct in_addr * <parameter>addrs</parameter></paramdef>
    <paramdef>int <parameter>format</parameter></paramdef>
    <paramdef>char * <parameter>dst</parameter></paramdef>
    <paramdef>size_t <parameter>dstlen</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 id='description'><title>DESCRIPTION</title>
<para>These functions are obsolete;
there is no current equivalent,
because so far they have not proved useful.</para>

<para><emphasis remap='I'>Atoasr</emphasis>
converts an ASCII address, subnet, or address range
into a suitable combination of binary addresses
(in network byte order).
<emphasis remap='I'>Rangetoa</emphasis>
converts an address range back into ASCII,
using dotted-decimal form for the addresses
(the other reverse conversions are handled by
<citerefentry><refentrytitle>ipsec_addrtoa</refentrytitle><manvolnum>3</manvolnum></citerefentry>
and
<citerefentry><refentrytitle>ipsec_subnettoa</refentrytitle><manvolnum>3</manvolnum></citerefentry>).</para>

<para>A single address can be any form acceptable to
<citerefentry><refentrytitle>ipsec_atoaddr</refentrytitle><manvolnum>3</manvolnum></citerefentry>:
dotted decimal, DNS name, or hexadecimal number.
A subnet
specification uses the form <emphasis remap='I'>network</emphasis><emphasis remap='B'>/</emphasis><emphasis remap='I'>mask</emphasis>
interpreted by
<citerefentry><refentrytitle>ipsec_atosubnet</refentrytitle><manvolnum>3</manvolnum></citerefentry>.</para>

<para>An address range is two
<citerefentry><refentrytitle>ipsec_atoaddr</refentrytitle><manvolnum>3</manvolnum></citerefentry>
addresses separated by a
<literal>...</literal>
delimiter.
If there are four dots rather than three, the first is taken as
part of the begin address,
e.g. for a complete DNS name which ends with
<literal>.</literal>
to suppress completion attempts.
The begin address of a range must be
less than or equal to the end address.</para>

<para>The
<varname role='parameter'>srclen</varname>
parameter of
<function>atoasr</function>
specifies the length of the ASCII string pointed to by
<varname role='parameter'>src</varname>;
it is an error for there to be anything else
(e.g., a terminating NUL) within that length.
As a convenience for cases where an entire NUL-terminated string is
to be converted,
a
<varname role='parameter'>srclen</varname>
value of
<literal>0</literal>
is taken to mean
<emphasis remap='B'>strlen(src)</emphasis>.</para>

<para>The
<varname role='parameter'>type</varname>
parameter of
<function>atoasr</function>
must point to a
<emphasis remap='B'>char</emphasis>
variable used to record which form was found.
The
<varname role='parameter'>addrs</varname>
parameter must point to a two-element array of
<emphasis remap='B'>struct in_addr</emphasis>
which receives the results.
The values stored into
<emphasis remap='B'>*type</emphasis>,
and the corresponding values in the array, are:</para>

<!-- .ta 3c +2c +3c -->
<para>	*type	addrs[0]	addrs[1]</para>

<para>address	<emphasis remap='B'>'a'</emphasis>	address	-
<!-- .br -->
subnet	<emphasis remap='B'>'s'</emphasis>	network	mask
<!-- .br -->
range	<emphasis remap='B'>'r'</emphasis>	begin	end</para>

<para>The
<varname role='parameter'>dstlen</varname>
parameter of
<function>rangetoa</function>
specifies the size of the
<varname role='parameter'>dst</varname>
parameter;
under no circumstances are more than
<varname role='parameter'>dstlen</varname>
bytes written to
<varname role='parameter'>dst</varname>.
A result which will not fit is truncated.
<emphasis remap='I'>Dstlen</emphasis>
can be zero, in which case
<varname role='parameter'>dst</varname>
need not be valid and no result is written,
but the return value is unaffected;
in all other cases, the (possibly truncated) result is NUL-terminated.
The
<emphasis remap='I'>freeswan.h</emphasis>
header file defines a constant,
<emphasis remap='B'>RANGETOA_BUF</emphasis>,
which is the size of a buffer just large enough for worst-case results.</para>

<para>The
<varname role='parameter'>format</varname>
parameter of
<function>rangetoa</function>
specifies what format is to be used for the conversion.
The value
<literal>0</literal>
(not the ASCII character
<emphasis remap='B'>'0'</emphasis>,
but a zero value)
specifies a reasonable default,
and is in fact the only format currently available.
This parameter is a hedge against future needs.</para>

<para><emphasis remap='I'>Atoasr</emphasis>
returns NULL for success and
a pointer to a string-literal error message for failure;
see DIAGNOSTICS.
<emphasis remap='I'>Rangetoa</emphasis>
returns
<literal>0</literal>
for a failure, and otherwise
always returns the size of buffer which would
be needed to
accommodate the full conversion result, including terminating NUL;
it is the caller's responsibility to check this against the size of
the provided buffer to determine whether truncation has occurred.</para>
</refsect1>

<refsect1 id='see_also'><title>SEE ALSO</title>
<para><citerefentry><refentrytitle>ipsec_atoaddr</refentrytitle><manvolnum>3</manvolnum></citerefentry>, <citerefentry><refentrytitle>ipsec_atosubnet</refentrytitle><manvolnum>3</manvolnum></citerefentry></para>
</refsect1>

<refsect1 id='diagnostics'><title>DIAGNOSTICS</title>
<para>Fatal errors in
<function>atoasr</function>
are:
empty input;
error in
<citerefentry><refentrytitle>ipsec_atoaddr</refentrytitle><manvolnum>3</manvolnum></citerefentry>
or
<citerefentry><refentrytitle>ipsec_atosubnet</refentrytitle><manvolnum>3</manvolnum></citerefentry>
during conversion;
begin address of range exceeds end address.</para>

<para>Fatal errors in
<function>rangetoa</function>
are:
unknown format.</para>
</refsect1>

<refsect1 id='history'><title>HISTORY</title>
<para>Written for the FreeS/WAN project by Henry Spencer.</para>
</refsect1>

<refsect1 id='bugs'><title>BUGS</title>
<para>The restriction of error reports to literal strings
(so that callers don't need to worry about freeing them or copying them)
does limit the precision of error reporting.</para>

<para>The error-reporting convention lends itself
to slightly obscure code,
because many readers will not think of NULL as signifying success.
A good way to make it clearer is to write something like:</para>

<literallayout remap='.nf'>
<emphasis remap='B'>const char *error;</emphasis>

<emphasis remap='B'>error = atoasr( /* ... */ );</emphasis>
<emphasis remap='B'>if (error != NULL) {</emphasis>
<emphasis remap='B'>        /* something went wrong */</emphasis>
</literallayout> <!-- .fi -->
</refsect1>
</refentry>

