<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                   "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<!-- lifted from troff+man by doclifter -->
<refentry>
<refmeta>
<refentrytitle>IPSEC_TTOUL</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>16 Aug 2000</refmiscinfo>
</refmeta>
<refnamediv id='name'>
<refname>ipsec ttoul</refname>
<refname>ipsec ultot</refname>
<refpurpose>convert unsigned-long numbers to and from text</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;freeswan.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>const char *<function>ttoul</function></funcdef>
    <paramdef>const char * <parameter>src</parameter></paramdef>
    <paramdef>size_t <parameter>srclen</parameter></paramdef>
    <paramdef>int <parameter>base</parameter></paramdef>
    <paramdef>unsigned long * <parameter>n</parameter></paramdef>
</funcprototype>
<funcsynopsisinfo>

</funcsynopsisinfo>
<funcprototype>
<funcdef>size_t <function>ultot</function></funcdef>
    <paramdef>unsigned long <parameter>n</parameter></paramdef>
    <paramdef>int <parameter>format</parameter></paramdef>
    <paramdef>char * <parameter>dst</parameter></paramdef>
    <paramdef>size_t <parameter>dstlen</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 id='description'><title>DESCRIPTION</title>
<para><emphasis remap='I'>Ttoul</emphasis>
converts a text-string number into a binary
<emphasis remap='B'>unsigned long</emphasis>
value.
<emphasis remap='I'>Ultot</emphasis>
does the reverse conversion, back to a text version.</para>

<para>Numbers are specified in text as
decimal (e.g.
<literal>123</literal>),
octal with a leading zero (e.g.
<literal>012</literal>,
which has value 10),
or hexadecimal with a leading
<emphasis remap='B'>0x</emphasis>
(e.g.
<emphasis remap='B'>0x1f</emphasis>,
which has value 31)
in either upper or lower case.</para>

<para>The
<varname role='parameter'>srclen</varname>
parameter of
<function>ttoul</function>
specifies the length of the string pointed to by
<varname role='parameter'>src</varname>;
it is an error for there to be anything else
(e.g., a terminating NUL) within that length.
As a convenience for cases where an entire NUL-terminated string is
to be converted,
a
<varname role='parameter'>srclen</varname>
value of
<literal>0</literal>
is taken to mean
<emphasis remap='B'>strlen(src)</emphasis>.</para>

<para>The
<varname role='parameter'>base</varname>
parameter of
<function>ttoul</function>
can be
<literal>8</literal>,
<literal>10</literal>,
or
<literal>16</literal>,
in which case the number supplied is assumed to be of that form
(and in the case of
<literal>16</literal>,
to lack any
<emphasis remap='B'>0x</emphasis>
prefix).
It can also be
<literal>0</literal>,
in which case the number is examined for a leading zero
or a leading
<emphasis remap='B'>0x</emphasis>
to determine its base.</para>

<para>The
<varname role='parameter'>dstlen</varname>
parameter of
<function>ultot</function>
specifies the size of the
<varname role='parameter'>dst</varname>
parameter;
under no circumstances are more than
<varname role='parameter'>dstlen</varname>
bytes written to
<varname role='parameter'>dst</varname>.
A result which will not fit is truncated.
<emphasis remap='I'>Dstlen</emphasis>
can be zero, in which case
<varname role='parameter'>dst</varname>
need not be valid and no result is written,
but the return value is unaffected;
in all other cases, the (possibly truncated) result is NUL-terminated.
The
<emphasis remap='I'>freeswan.h</emphasis>
header file defines a constant,
<emphasis remap='B'>ULTOT_BUF</emphasis>,
which is the size of a buffer just large enough for worst-case results.</para>

<para>The
<varname role='parameter'>format</varname>
parameter of
<function>ultot</function>
must be one of:</para>
<!-- .RS -->
<variablelist remap='IP'>
  <varlistentry>
  <term><emphasis remap='B'>'o'</emphasis></term>
  <listitem>
<para>octal conversion with leading
<literal>0</literal></para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>&nbsp;8</emphasis></term>
  <listitem>
<para>octal conversion with no leading
<literal>0</literal></para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>'d'</emphasis></term>
  <listitem>
<para>decimal conversion</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><literal>10</literal></term>
  <listitem>
<para>same as
<emphasis remap='B'>d</emphasis></para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>'x'</emphasis></term>
  <listitem>
<para>hexadecimal conversion, including leading
<emphasis remap='B'>0x</emphasis></para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><literal>16</literal></term>
  <listitem>
<para>hexadecimal conversion with no leading
<emphasis remap='B'>0x</emphasis></para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><literal>17</literal></term>
  <listitem>
<para>like
<literal>16</literal>
except padded on left with
<literal>0</literal>s
to eight digits (full width of a 32-bit number)</para>
  </listitem>
  </varlistentry>
</variablelist>
<!-- .RE -->

<para><emphasis remap='I'>Ttoul</emphasis>
returns NULL for success and
a pointer to a string-literal error message for failure;
see DIAGNOSTICS.
<emphasis remap='I'>Ultot</emphasis>
returns
<literal>0</literal>
for a failure, and otherwise
returns the size of buffer which would
be needed to
accommodate the full conversion result, including terminating NUL
(it is the caller's responsibility to check this against the size of
the provided buffer to determine whether truncation has occurred).</para>
</refsect1>

<refsect1 id='see_also'><title>SEE ALSO</title>
<para><citerefentry><refentrytitle>atol</refentrytitle><manvolnum>3</manvolnum></citerefentry>, <citerefentry><refentrytitle>strtoul</refentrytitle><manvolnum>3</manvolnum></citerefentry></para>
</refsect1>

<refsect1 id='diagnostics'><title>DIAGNOSTICS</title>
<para>Fatal errors in
<function>ttoul</function>
are:
empty input;
unknown
<varname role='parameter'>base</varname>;
non-digit character found;
number too large for an
<emphasis remap='B'>unsigned long</emphasis>.</para>

<para>Fatal errors in
<function>ultot</function>
are:
unknown
<varname role='parameter'>format</varname>.</para>
</refsect1>

<refsect1 id='history'><title>HISTORY</title>
<para>Written for the FreeS/WAN project by Henry Spencer.</para>
</refsect1>

<refsect1 id='bugs'><title>BUGS</title>
<para>Conversion of
<literal>0</literal>
with format
<emphasis remap='B'>o</emphasis>
yields
<literal>00</literal>.</para>

<para><emphasis remap='I'>Ultot</emphasis>
format
<literal>17</literal>
is a bit of a kludge.</para>

<para>The restriction of error reports to literal strings
(so that callers don't need to worry about freeing them or copying them)
does limit the precision of error reporting.</para>

<para>The error-reporting convention lends itself to slightly obscure code,
because many readers will not think of NULL as signifying success.
A good way to make it clearer is to write something like:</para>

<!-- .RS -->
<literallayout remap='.nf'>
<emphasis remap='B'>const char *error;</emphasis>

<emphasis remap='B'>error = ttoul( /* ... */ );</emphasis>
<emphasis remap='B'>if (error != NULL) {</emphasis>
<emphasis remap='B'>        /* something went wrong */</emphasis>
</literallayout> <!-- .fi -->
</refsect1>
</refentry>

